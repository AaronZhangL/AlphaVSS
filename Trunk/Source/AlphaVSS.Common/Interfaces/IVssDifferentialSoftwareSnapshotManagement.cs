using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Alphaleonis.Win32.Vss
{
    /// <summary>
    /// The <see cref="IVssDifferentialSoftwareSnapshotManagement"/> interface contains methods that allow applications to query and 
    /// manage shadow copy storage areas generated by the system shadow copy provider.
    /// </summary>
    /// <remarks>
    ///     <para>
    ///         <note>
    ///             <para>
    ///                 <b>Windows XP: </b> This interface requires Windows Server 2003 or later.
    ///             </para>
    ///         </note>
    ///     </para>
    /// </remarks>
    public interface IVssDifferentialSoftwareSnapshotManagement
    {
        //
        // From IVssDifferentialSoftwareSnapshotMgmt
        //
        void AddDiffArea(string volumeName, string diffAreaVolumeName, Int64 maximumDiffSpace);
        void ChangeDiffAreaMaximumSize(string volumeName, string diffAreaVolumeName, Int64 maximumDiffSpace);
        
        IList<IVssManagementObjectProperties> QueryDiffAreasForSnapshot(Guid snapshotId);
        IList<IVssManagementObjectProperties> QueryDiffAreasForVolume(string volumeName);
        IList<IVssManagementObjectProperties> QueryDiffAreasOnVolume(string volumeName);
        IList<IVssManagementObjectProperties> QueryVolumesSupportedForDiffAreas(string originalVolumeName);
        //
        // From IVssDifferentialSoftwareSnapshotMgmt2
        //
        void ChangeDiffAreaMaximumSize(string volumeName, string diffAreaVolumeName, Int64 maximumDiffSpace, bool isVolatile);

        //
        // From IVssDifferentialSoftwareSnapshotMgmt3
        //
        void ClearVolumeProtectFault(string volumeName);
        void DeleteUnusedDiffAreas(string diffAreaVolumeName);
        VssVolumeProtectionInfo GetVolumeProtectionLevel(string volumeName);
        void SetVolumeProtectionLevel(string volumeName, VssProtectionLevel protectionLevel);
    }
}
